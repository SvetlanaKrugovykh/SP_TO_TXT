#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import requests
import time
import io

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SPEECH_SERVICE_URL = "http://localhost:8338"

def transcribe_audio_file(file_path, client_id, segment_number=None):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    
    Args:
        file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º)
        segment_number: –ù–æ–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        # –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
        with open(file_path, 'rb') as audio_file:
            files = {
                'file': (file_path, audio_file, 'audio/wav')
            }
            
            data = {
                'client_id': str(client_id),
                'segment_number': str(segment_number) if segment_number else 'unknown'
            }
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                f"{SPEECH_SERVICE_URL}/transcribe",
                files=files,
                data=data,
                timeout=30
            )
            
            if response.status_code == 200:
                return {
                    'success': True,
                    'result': response.json()
                }
            else:
                return {
                    'success': False,
                    'error': f"HTTP {response.status_code}: {response.text}"
                }
                
    except Exception as e:
        return {
            'success': False,
            'error': str(e)
        }

def transcribe_audio_data(audio_data, filename, client_id, segment_number=None):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    
    Args:
        audio_data: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        filename: –ò–º—è —Ñ–∞–π–ª–∞
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        segment_number: –ù–æ–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        files = {
            'file': (filename, io.BytesIO(audio_data), 'audio/ogg')
        }
        
        data = {
            'client_id': str(client_id),
            'segment_number': str(segment_number) if segment_number else 'unknown'
        }
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            f"{SPEECH_SERVICE_URL}/transcribe",
            files=files,
            data=data,
            timeout=30
        )
        
        if response.status_code == 200:
            return {
                'success': True,
                'result': response.json()
            }
        else:
            return {
                'success': False,
                'error': f"HTTP {response.status_code}: {response.text}"
            }
            
    except Exception as e:
        return {
            'success': False,
            'error': str(e)
        }

def get_service_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get(f"{SPEECH_SERVICE_URL}/health", timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception:
        return None

def get_service_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get(f"{SPEECH_SERVICE_URL}/stats", timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception:
        return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å PyTelegramBotAPI
def telegram_bot_example():
    """
    –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º
    
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyTelegramBotAPI
    """
    print("üìû –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
    status = get_service_status()
    if not status or not status.get('model_ready'):
        print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        return
    
    print(f"‚úÖ –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤: {status.get('service')} v{status.get('version')}")
    
    # –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è –±–æ—Ç–∞
    bot_code = '''
import telebot
import requests
import io

bot = telebot.TeleBot("YOUR_BOT_TOKEN")

@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = bot.get_file(message.voice.file_id)
        
        # –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
        audio_data = bot.download_file(file_info.file_path)
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        files = {
            'file': ('voice.ogg', io.BytesIO(audio_data), 'audio/ogg')
        }
        
        data = {
            'client_id': str(message.from_user.id),
            'segment_number': str(message.message_id)
        }
        
        response = requests.post(
            'http://localhost:8338/transcribe',
            files=files,
            data=data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            text = result.get('translated_text', '')
            processing_time = result.get('processing_time', 0)
            
            if text.strip():
                bot.reply_to(message, f"üéµ‚û°Ô∏èüìù {text}")
                print(f"‚úÖ Processed voice for user {message.from_user.id}: {text[:50]}...")
            else:
                bot.reply_to(message, "ü§∑‚Äç‚ôÇÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ")
            print(f"‚ùå Error: {response.status_code} - {response.text}")
            
    except Exception as e:
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        print(f"‚ùå Exception: {e}")

@bot.message_handler(content_types=['audio'])
def handle_audio(message):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
    handle_voice(message)

@bot.message_handler(commands=['status'])
def handle_status(message):
    try:
        response = requests.get('http://localhost:8338/health', timeout=5)
        if response.status_code == 200:
            status = response.json()
            bot.reply_to(message, f"ü§ñ –°–µ—Ä–≤–∏—Å: {status.get('status', 'unknown')}")
        else:
            bot.reply_to(message, "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("ü§ñ Telegram bot started...")
    bot.polling(none_stop=True)
    '''
    
    print("\nüìù –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞:")
    print(bot_code)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º:")
    test_file = "uploads/Speech-to-TXT-Server_segment_20.wav"
    
    result = transcribe_audio_file(test_file, "test_user", 1)
    
    if result['success']:
        data = result['result']
        print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        print(f"üìù –¢–µ–∫—Å—Ç: {data.get('translated_text', '')}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {data.get('processing_time', 0):.2f}s")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")

if __name__ == "__main__":
    telegram_bot_example()
